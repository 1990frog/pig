### Application Pod
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pig-upms-biz
  namespace: temp
  labels:
    app: pig-upms-biz
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pig-upms-biz
  template:
    metadata:
      labels:
        app: pig-upms-biz
    spec:
      containers:
        - name: pig-upms-biz
          image: "dockerhub.clinbrain.com/pig-upms-biz:20220125_528632b3"
          imagePullPolicy: Always
          env:
            - name: NACOS_HOST
              value: 192.168.0.112
            - name: NACOS_PORT
              value: "8848"
            - name: pig-register
              value: "192.168.0.112"
            - name: pig-mysql
              value: "192.168.0.112"
            - name: pig-redis
              value: "192.168.0.112"

          volumeMounts:
            - name: config-volume
              mountPath: /home/java/application.properties
              subPath: application.properties
            - name: config-volume
              mountPath: /home/java/application-kubernetes.properties
              subPath: application-kubernetes.properties
      volumes:
        - name: config-volume
          configMap:
            name: pig-upms-biz-config

### Application Service
---
apiVersion: v1
kind: Service
metadata:
  name: pig-upms-biz
  namespace: temp
spec:
  type: NodePort
  ports:
    - port: 14032
      nodePort: 14032
      targetPort: 8080
  selector:
    app: pig-upms-biz

### Application Config MAP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pig-upms-biz-config
  namespace: temp
data:
  bootstrap.yml: |
    server:
      port: 4000

    spring:
      application:
        name: @artifactId@
      cloud:
        nacos:
          discovery:
            server-addr: ${NACOS_HOST:pig-register}:${NACOS_PORT:8848}
          config:
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            file-extension: yml
            shared-configs:
              - application-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}
      profiles:
        active: @profiles.active@
    logging:
      level:
        com:
          pig4cloud:
            pig:
              admin: debug

  logback-spring.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration debug="false" scan="false">
    	<springProperty scop="context" name="spring.application.name" source="spring.application.name" defaultValue=""/>
    	<property name="log.path" value="logs/${spring.application.name}"/>
    	<!-- 彩色日志格式 -->
    	<property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    	<!-- 彩色日志依赖的渲染类 -->
    	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    	<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    	<conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    	<!-- Console log output -->
    	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
    		<encoder>
    			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
    		</encoder>
    	</appender>

    	<!-- Log file debug output -->
    	<appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
    		<file>${log.path}/debug.log</file>
    		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
    			<fileNamePattern>${log.path}/%d{yyyy-MM, aux}/debug.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
    			<maxFileSize>50MB</maxFileSize>
    			<maxHistory>30</maxHistory>
    		</rollingPolicy>
    		<encoder>
    			<pattern>%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n</pattern>
    		</encoder>
    	</appender>

    	<!-- Log file error output -->
    	<appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
    		<file>${log.path}/error.log</file>
    		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
    			<fileNamePattern>${log.path}/%d{yyyy-MM}/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
    			<maxFileSize>50MB</maxFileSize>
    			<maxHistory>30</maxHistory>
    		</rollingPolicy>
    		<encoder>
    			<pattern>%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n</pattern>
    		</encoder>
    		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
    			<level>ERROR</level>
    		</filter>
    	</appender>

    	<!--nacos 心跳 INFO 屏蔽-->
    	<logger name="com.alibaba.nacos" level="OFF">
    		<appender-ref ref="error"/>
    	</logger>

    	<!-- Level: FATAL 0  ERROR 3  WARN 4  INFO 6  DEBUG 7 -->
    	<root level="INFO">
    		<appender-ref ref="console"/>
    		<appender-ref ref="debug"/>
    		<appender-ref ref="error"/>
    	</root>
    </configuration>



### Application Authority Role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: temp
  name: pig-upms-biz-reader
rules:
  - apiGroups: [""]
    resources: ["pods","configmaps","services"]
    verbs: ["get", "watch", "list"]
### Application Authority Role  Ref
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pig-upms-biz-reader
  namespace: temp
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pig-upms-biz-reader
subjects:
  - kind: ServiceAccount
    name: default
    namespace: temp
### Application Read Config Map Default ServiceAccount
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: temp
