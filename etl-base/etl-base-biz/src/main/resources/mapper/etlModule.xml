<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.clinbrain.dip.rest.mapper.DBETLModuleMapper">
    <resultMap id="etlLogSummaryMap" type="etlLogSummary">
        <id column="summary_id" property="summaryId"/>
        <collection property="logDetails" javaType="List" column="summary_id" ofType="etlLogDetail"
                    select="getLogDetailBySummaryId"/>
    </resultMap>

    <resultMap id="moduleDetail" type="etlModule" autoMapping="true">
        <id property="moduleCode" column="module_code"/>
        <result property="hospitalName" column="hospital_code"/>
        <association property="jobId" column="{moduleCode=module_code}" javaType="integer"
                     select="selectJobIdByModuleCode" fetchType="lazy"/>
        <collection property="workflows" ofType="etlWorkflow" columnPrefix="ew_" autoMapping="true">
            <id property="workflowCode" column="workflow_code"/>
            <association property="connection" javaType="etlConnection" columnPrefix="ec_" autoMapping="true"/>
            <association property="targetConnection" javaType="etlConnection" fetchType="lazy"
                         column="{workflowCode=workflow_code}" select="selectTargetConnection"/>
            <association property="filter" javaType="etlWorkflowTokenFilter" columnPrefix="ewtf_" autoMapping="true"/>
            <association property="fullSql" javaType="string" column="{workflowCode=workflow_code}"
                         select="selectFullSql" fetchType="lazy"/>
			<association property="workflowSQL" javaType="string" column="{workflowCode=workflow_code}"
						 select="selectViewSql" fetchType="lazy"/>
            <collection property="dataxflows" ofType="etlWorkflowDataxflow" fetchType="lazy"
                        column="{workflowCode=workflow_code}" select="selectDataxflowByWorkflowCode"/>
            <collection property="selectList" ofType="etlWorkflowTokenSelect" columnPrefix="ewts_" autoMapping="true">
            </collection>

            <collection property="fromOrJoinList" ofType="etlWorkflowTokenFromOrJoin" columnPrefix="ewtfj_"
                        autoMapping="true">
            </collection>
        </collection>
    </resultMap>

    <resultMap id="etlWorkflowDataxflowMap" type="etlWorkflowDataxflow" autoMapping="true">
        <result property="workflowCode" column="ewd_workflow_code"/>
        <result property="dataflowCode" column="ewd_dataflow_code"/>
        <result property="dataflowDesc" column="ewd_dataflow_desc"/>
        <result property="dataflowType" column="ewd_dataflow_type"/>
        <result property="dataflowParameter" column="ewd_dataflow_parameter"/>
        <result property="createdAt" column="ewd_created_at"/>
        <result property="updatedAt" column="ewd_updated_at"/>
        <association autoMapping="true" javaType="etlDataxflow" columnPrefix="ed_" property="dataxflow"/>
    </resultMap>

    <select id="selectModuleDetailByCode" resultMap="moduleDetail">
        SELECT
            em.*,
            ew.workflow_code                              AS ew_workflow_code,
            ecp.component_desc                            AS ew_workflow_desc,
            ecp.component_category                        AS ew_workflow_category,
            ecp.param_define                              AS ew_param_define,
            ew.workflow_param                             AS ew_workflow_param,
            ew.workflow_name                              AS ew_workflow_name,
            ew.workflow_sequence_default                  AS ew_workflow_sequence_default,
            ew.workflow_sequence_customized               AS ew_workflow_sequence_customized,
            ew.loc                                        AS ew_loc,
            ew.runnable                                   AS ew_runnable,
            ew.module_code                                AS ew_module_code,
            ew.component_code                             AS ew_component_code,
            ew.target_schema                              AS ew_target_schema,
            ew.target_table                               AS ew_target_table,
            ew.is_enable                                  AS ew_is_enable,
            ew.is_default                                 AS ew_is_default,
            ew.created_at                                 AS ew_created_at,
            ew.updated_at                                 AS ew_updated_at,
            ew.incremental_mode                           AS ew_incremental_mode,
            ec.connection_code                            AS ew_ec_connection_code,
            ec.url                                        AS ew_ec_url,
            ec.user                                       AS ew_ec_user,
            ec.engine_id                                  AS ew_ec_engine_id,
            ec.dataflow_reader                            AS ew_ec_dataflowReader,
            ec.dataflow_writer                            AS ew_ec_dataflowWriter,
            ec.created_at                                 AS ew_ec_created_at,
            ec.updated_at                                 AS ew_ec_updated_at,
            ewts.workflow_token_code                      AS ew_ewts_workflow_token_code,
            ewts.source_table_alias_name                  AS ew_ewts_source_table_alias_name,
            ewts.source_column_name                       AS ew_ewts_source_column_name,
            ewts.source_column_expression_default         AS ew_ewts_source_column_expression_default,
            ewts.source_column_expression_customized      AS ew_ewts_source_column_expression_customized,
            ewts.target_column_alias_name                 AS ew_ewts_target_column_alias_name,
            ewts.import_check                             AS ew_ewts_import_check,
            ewts.is_enable                                AS ew_ewts_is_enable,
            ewts.is_default                               AS ew_ewts_is_default,
            ewts.created_at                               AS ew_ewts_created_at,
            ewts.updated_at                               AS ew_ewts_updated_at,
            ewtfj.workflow_token_code                     AS ew_ewtfj_workflow_token_code,
            ewtfj.source_db_name                          AS ew_ewtfj_source_db_name,
            ewtfj.source_table_name                       AS ew_ewtfj_source_table_name,
            ewtfj.source_table_expression                 AS ew_ewtfj_source_table_expression,
            ewtfj.source_table_alias_name                 AS ew_ewtfj_source_table_alias_name,
            ewtfj.is_primary_table                        AS ew_ewtfj_is_primary_table,
            ewtfj.join_type                               AS ew_ewtfj_join_type,
            ewtfj.join_on_current_column_name             AS ew_ewtfj_join_on_current_column_name,
            ewtfj.join_on_right_table_alias_name          AS ew_ewtfj_join_on_right_table_alias_name,
            ewtfj.join_on_right_table_column_name         AS ew_ewtfj_join_on_right_table_column_name,
            ewtfj.join_on_expression                      AS ew_ewtfj_join_on_expression,
            ewtfj.is_enable                               AS ew_ewtfj_is_enable,
            ewtfj.is_default                              AS ew_ewtfj_is_default,
            ewtfj.created_at                              AS ew_ewtfj_created_at,
            ewtfj.updated_at                              AS ew_ewtfj_updated_at,
            ewtfj.incremental_column                      AS ew_ewtfj_incremental_column,
            ewtfj.workflow_token_code                     AS ew_ewtf_workflow_token_code,
            ewtf.common_filter_expression                 AS ew_ewtf_common_filter_expression,
            ewtf.common_filter_expression_customized      AS ew_ewtf_common_filter_expression_customized,
            ewtf.incremental_filter_expression            AS ew_ewtf_incremental_filter_expression,
            ewtf.incremental_filter_expression_customized AS ew_ewtf_incremental_filter_expression_customized,
            ewtf.range_filter_expression                  AS ew_ewtf_range_filter_expression,
            ewtf.range_filter_expression_customized       AS ew_ewtf_range_filter_expression_customized,
            ewtf.is_enable                                AS ew_ewtf_is_enable,
            ewtf.is_default                               AS ew_ewtf_is_default,
            ewtf.created_at                               AS ew_ewtf_created_at,
            ewtf.updated_at                               AS ew_ewtf_updated_at
        FROM etl_module em
            LEFT JOIN etl_workflow ew on em.module_code = ew.module_code and ew.is_enable = 1
            LEFT JOIN etl_component ecp on ew.component_code = ecp.component_code
            LEFT JOIN etl_workflow_connection ewc
                ON ew.workflow_code = ewc.workflow_code and ewc.connection_type != 'target'
            LEFT JOIN etl_connection ec ON ewc.connection_code = ec.connection_code
            LEFT JOIN etl_workflow_token ewt ON ew.workflow_code = ewt.workflow_code AND ewt.is_enable = 1
            LEFT JOIN etl_workflow_token_select ewts
                ON ewt.workflow_token_code = ewts.workflow_token_code AND ewts.is_enable = 1
            LEFT JOIN etl_workflow_token_from_or_join ewtfj
                ON ewt.workflow_token_code = ewtfj.workflow_token_code AND ewtfj.is_enable = 1
            LEFT JOIN etl_workflow_token_filter ewtf
                ON ewt.workflow_token_code = ewtf.workflow_token_code AND ewtf.is_enable = 1
        WHERE em.module_code = #{moduleCode}

    </select>

    <select id="selectJobIdByModuleCode" resultType="integer">
        select job_id
        from etl_job_module
        where module_code = #{moduleCode}
    </select>

    <select id="selectTargetConnection" resultType="etlConnection">
        select t2.*
        from etl_workflow_connection t1
            join etl_connection t2
                on t1.connection_code = t2.connection_code and t1.connection_type = 'target'
                   and t1.workflow_code = #{workflowCode}
    </select>

    <select id="selectFullSql" resultType="string">
        select ifNull(full_sql_customized, full_sql_default)
        from etl_workflow_token_full_sql t1
            join etl_workflow_token t2
                on t1.workflow_token_code = t2.workflow_token_code and t2.token_code = 'ETL_FULL_SQL' and
                   t2.workflow_code = #{workflowCode}
    </select>

	<select id="selectViewSql" resultType="string">
		select execution_sql as workflow_sql from view_union_sql where workflow_code = #{workflowCode}
	</select>

    <select id="selectDataxflowByWorkflowCode" resultMap="etlWorkflowDataxflowMap">
        SELECT
            ewd.workflow_code      as ewd_workflow_code,
            ewd.dataflow_code      as ewd_dataflow_code,
            ewd.dataflow_desc      as ewd_dataflow_desc,
            ewd.dataflow_type      as ewd_dataflow_type,
            ewd.dataflow_parameter as ewd_dataflow_parameter,
            ewd.created_at         as ewd_created_at,
            ewd.updated_at         as ewd_updated_at,
            ed.id                  as ed_id,
            ed.dataflow_code       as ed_dataflow_code,
            ed.dataflow_name       as ed_dataflow_name,
            ed.dataflow_type       as ed_dataflow_type,
            ed.jdbc_type           as ed_jdbc_type,
            ed.dataflow_param      as ed_dataflow_param
        FROM etl_workflow_dataxflow ewd inner join etl_dataxflow ed on ewd.dataflow_code = ed.dataflow_code
        where ewd.workflow_code = #{workflowCode}
    </select>

    <resultMap id="etlModuleMap" type="etlModule" autoMapping="true">
        <id property="moduleCode" column="module_code"/>
        <result property="hospitalName" column="hospital_code"/>
        <result property="jobId" column="job_id"/>
        <association property="etlJob" javaType="etlJob" column="job_id" select="getJobByCode">
            <id column="id" property="id"/>
        </association>
        <association property="etlLogSummary" javaType="etlLogSummary" fetchType="lazy" column="module_code" select="getLogsummeyMaxTime">
            <id column="summary_id" property="summaryId"/>
        </association>
        <collection property="workflows" javaType="List" ofType="etlWorkflow"  column="module_code" select="getWorkflow">
            <id property="workflowCode" column="workflow_code"/>
            <association property="connection" javaType="etlConnection" column="workflow_code" select="getConnection"/>
        </collection>
    </resultMap>

    <resultMap id="etlModulesMap" type="etlModule" autoMapping="true">
        <id property="moduleCode" column="module_code"/>
        <result property="hospitalName" column="hospital_code"/>
        <result property="jobId" column="job_id"/>
    </resultMap>

    <select id="getLogsummeyMaxTime" parameterType="string" resultType="etlLogSummary">
        SELECT *  FROM `etl_logsummary` WHERE module_name=#{module_code} and `status`=2 ORDER BY summary_id DESC limit 1;
    </select>

    <select id="selectAllModules" resultMap="etlModulesMap" parameterType="int">
        SELECT
        em.*,
        ejm.job_id,
        ec.connection_code,
        ec.url,
        ec.`user`,
        ec.`password`
        FROM etl_module em
        LEFT JOIN etl_connection ec ON em.connection_code=ec.connection_code
        LEFT JOIN etl_job_module ejm  ON em.module_code=ejm.module_code
        LEFT JOIN etl_job ej ON ejm.job_id=ej.id
        <where>
            <if test="topicId !=null and topicId !=''">
                AND em.topic_id=#{topicId}
            </if>
            <if test="jobId !=null and jobId !=''">
                AND ejm.job_id=#{jobId}
            </if>
            <if test="hospital !=null and hospital !=''">
                and em.hospital_code = #{hospital}
            </if>
            <if test="moduleName !=null and moduleName !=''">
                and em.module_name LIKE CONCAT('%',#{moduleName},'%')
            </if>
        </where>
    </select>

    <select id="selectModuleDetails" resultMap="etlModuleMap" parameterType="int">
        SELECT
        em.*,
        ejm.job_id,
        ec.connection_code,
        ec.url,
        ec.`user`,
        ec.`password`
        FROM etl_module em
        LEFT JOIN etl_connection ec ON em.connection_code=ec.connection_code
            LEFT JOIN etl_job_module ejm  ON em.module_code=ejm.module_code
            LEFT JOIN etl_job ej ON ejm.job_id=ej.id
        <where>
            <if test="topicId !=null and topicId !=''">
                AND em.topic_id=#{topicId}
            </if>
            <if test="jobId !=null and jobId !=''">
                AND ejm.job_id=#{jobId}
            </if>
            <if test="hospital !=null and hospital !=''">
                and em.hospital_code = #{hospital}
            </if>
            <if test="moduleName !=null and moduleName !=''">
                and em.module_name LIKE CONCAT('%',#{moduleName},'%')
            </if>
        </where>
    </select>

    <select id="getJobByCode" parameterType="int" resultType="etlJob">
        select * from etl_job WHERE id = #{jobId}
    </select>

    <select id="getWorkflow" parameterType="String" resultType="etlWorkflow">
        SELECT ew.*
        FROM `etl_workflow` ew LEFT JOIN etl_module em ON ew.module_code = em.module_code
        WHERE em.module_code = #{module_code}
        ORDER BY workflow_sequence_default
    </select>

    <resultMap id="jobSchedulerMap" type="etlJob" autoMapping="true">
        <id column="id" property="id"/>
        <association property="scheduler" columnPrefix="sche_" autoMapping="true" javaType="etlScheduler"/>
    </resultMap>

    <select id="getJobs" resultMap="jobSchedulerMap">
        SELECT ejob.*,sche.scheduler_id as sche_scheduler_id, sche.scheduler_desc as sche_scheduler_desc,
            sche.scheduler_cron as sche_scheduler_cron, sche.created_at as sche_created_at,
            sche.updated_at as sche_updated_at FROM etl_job ejob
            left join etl_scheduler sche on ejob.scheduler_id = sche.scheduler_id
        <where>
            <if test="topicId != null and topicId != ''">
               AND topic_id = #{topicId}
            </if>
            <if test="jobName !=null and jobName !=''">
                AND job_name LIKE CONCAT('%',#{jobName},'%')
            </if>
        </where>
    </select>

    <select id="selectModuleByTopicId" parameterType="int" resultType="int">
        select count(ejm.module_code) from etl_job_module ejm LEFT JOIN  etl_job ej ON ejm.job_id=ej.id
        <where>
            <if test="topicId !=null and topicId !=''">
                AND ej.topic_id=#{topicId}
            </if>
            <if test="jobId !=null and jobId !=''">
                AND ejm.job_id=#{jobId}
            </if>
        </where>
    </select>

    <update id="renovateModuleStatus" parameterType="string">
        update etl_module
        <set>
            <if test="enabled==1">
                enabled=0
            </if>
            <if test="enabled==0">
                enabled=1
            </if>
        </set>
        WHERE module_code=#{code}
    </update>

    <select id="checkTopicIdByJob" parameterType="int" resultType="int">
        select count(id)
        from etl_job
        WHERE topic_id = #{topicId}
    </select>

    <select id="checkConnectionByModule" parameterType="string" resultType="int">
        SELECT count(module_code)
        FROM etl_module
            WHERE connection_code = #{connectionCode}
    </select>

    <select id="checkTokenByWorkflowToken" parameterType="string" resultType="int">
        SELECT count(*)
        FROM etl_workflow_token
        WHERE token_code = #{code}
    </select>

    <select id="getLogsInfoByModule" resultMap="etlLogSummaryMap" parameterType="String">
        SELECT summary_id, module_name, etl_type, `status`, business_model, log_summary_start, log_summary_end,
        start_date, end_date, start_numeric, end_numeric, batch_id
        FROM etl_logsummary
        <where>
            <if test="module !=null and  module !=''">
                AND module_name = #{module}
            </if>
            <if test="runtime !=null and runtime !=''">
                AND log_summary_start >= #{runtime}
            </if>
            ORDER BY log_summary_start DESC LIMIT 1;
        </where>
    </select>

    <select id="getLogDetailBySummaryId" resultType="etlLogDetail" parameterType="int">
        SELECT
            detail_id,
            `status`,
            sub_module_name,
            log_detail_start,
            log_detail_end,
            log_content,
            summary_id,
            batch_count,
            ip,
			log_path,
			uuid
        FROM `etl_logdetail`
        WHERE summary_id = #{summary_id} ORDER BY detail_id
    </select>

    <select id="queryHospitals" resultType="hospital">
        select * from etl_hospital
    </select>

    <update id="updateHospital" parameterType="hospital">
        UPDATE etl_hospital
        SET hospital_name = #{hospitalName}, updated_at = now()
        WHERE hospital_code = #{hospitalCode}
    </update>

    <insert id="insertHospital" parameterType="hospital">
        INSERT INTO etl_hospital (hospital_code, hospital_name, created_at, updated_at)
        VALUES (#{hospitalCode}, #{hospitalName}, now(), now())
    </insert>

    <delete id="deleteHospital" parameterType="string">
        delete from etl_hospital
        WHERE hospital_code = #{hospitalCode}
    </delete>

    <update id="updateModuleByCode" parameterType="etlModule">
        update etl_module
        set etl_type       = #{etlType}, full_while_months = #{fullWhileMonths}, range_start_date = #{rangeStartDate},
            range_end_date = #{rangeEndDate}, number_range = #{numberRange}
        WHERE module_code = #{moduleCode}
    </update>

    <select id="selectModuleCodeByWorkflowInfo" resultType="HashMap">
        select target_schema as targetSchema,target_table as targetTable,GROUP_CONCAT(module_code) as moduleCode from etl_workflow where target_table is not null
        group by target_schema,target_table
    </select>
</mapper>
